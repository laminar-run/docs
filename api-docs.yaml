openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: https://api.laminar.run
    description: Laminar API
tags:
  - name: Transform
    description: "Laminar Transform endpoints, for testing data transformations."
  - name: Flows
    description: "Laminar Flow endpoints, for managing flows and flow runs."
  - name: Workspaces
    description:
      "Laminar Workspace endpoints, for managing workspaces and workspace\
      \ memberships."
  - name: Users
    description: "Laminar User endpoints, for managing users."
  - name: Authentication
    description: "Laminar Authentication endpoints, for managing users and authentication."
paths:
  /workspaces/{id}:
    get:
      tags:
        - Workspaces
      summary: Get a workspace by ID
      description: Retrieves a specific workspace by its ID
      operationId: getWorkspaceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace retrieved successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
        "404":
          description: Workspace not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
      security:
        - bearerAuth: []
    put:
      tags:
        - Workspaces
      summary: Update workspace
      description: Updates the name of the specified workspace
      operationId: updateWorkspaceName
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Workspace updated successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
        "404":
          description: Workspace not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Workspaces
      summary: Delete workspace
      description: Deletes the specified workspace
      operationId: deleteWorkspace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: Workspace not found
        "204":
          description: Workspace deleted successfully
      security:
        - bearerAuth: []
  /users/{id}:
    put:
      tags:
        - Users
      summary: Update user
      description: Updates the user details for the specified ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes the user with the specified ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User deleted successfully
      security:
        - bearerAuth: []
  /flows:
    put:
      tags:
        - Flows
      summary: Update Flow
      description: Updates an existing flow with the provided details
      operationId: updateFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFlow"
        required: true
      responses:
        "200":
          description: Flow updated successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Flow"
      security:
        - bearerAuth: []
    post:
      tags:
        - Flows
      summary: Create Flow
      description: Creates a new flow with the provided details
      operationId: createFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFlow"
        required: true
      responses:
        "200":
          description: Flow created successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Flow"
      security:
        - bearerAuth: []
  /workspaces:
    get:
      tags:
        - Workspaces
      summary: Get all workspaces
      description: Retrieves all workspaces for the authenticated user
      operationId: getAllWorkspaces
      responses:
        "200":
          description: Successfully retrieved workspaces
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
      security:
        - bearerAuth: []
    post:
      tags:
        - Workspaces
      summary: Create a new workspace
      description: Creates a new workspace with the given name
      operationId: createWorkspace
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Workspace created successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Workspace"
      security:
        - bearerAuth: []
  /workspaces/{workspaceId}/users:
    get:
      tags:
        - Workspaces
      summary: Get all users in a workspace
      description: Retrieves all users in the specified workspace
      operationId: getAllUsersInWorkspace
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Users retrieved successfully
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: Workspace not found
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
    post:
      tags:
        - Workspaces
      summary: Add user to workspace
      description: Adds a user to the specified workspace with a role
      operationId: addUserToWorkspace
      parameters:
        - name: userEmail
          in: query
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: role
          in: query
          required: true
          schema:
            type: string
            enum:
              - OWNER
              - ADMIN
              - MEMBER
              - GUEST
      responses:
        "404":
          description: Workspace not found
        "201":
          description: User added to workspace successfully
      security:
        - bearerAuth: []
    delete:
      tags:
        - Workspaces
      summary: Remove user from workspace
      description: Removes a user from the specified workspace
      operationId: removeUserFromWorkspace
      parameters:
        - name: userEmail
          in: query
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User removed from workspace successfully
        "404":
          description: Workspace not found
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - Users
      summary: Get current user
      description: Retrieves the current authenticated user's details
      operationId: getCurrentUser
      responses:
        "200":
          description: User details retrieved successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user with the provided details
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/User"
      security:
        - bearerAuth: []
  /transform/test:
    post:
      tags:
        - Transform
      summary: Test transform
      description: Test a data transformation with Laminar
      operationId: testTransform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformDto"
        required: true
      responses:
        "400":
          description: "Bad request, invalid input or program"
          content:
            "*/*":
              schema:
                type: string
        "200":
          description: Transformation successful
          content:
            "*/*":
              schema:
                type: string
  /flows/execute:
    post:
      tags:
        - Flows
      summary: Execute Flow
      description: Executes a specified flow with given execution parameters
      operationId: executeFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteFlow"
        required: true
      responses:
        "400":
          description: "Bad request, unable to execute flow"
          content:
            "*/*":
              schema:
                type: string
        "200":
          description: Flow executed successfully
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
  /auth/getToken:
    post:
      tags:
        - Authentication
      summary: Get a token
      description: Get a token from Laminar Auth
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "401":
          description: Unauthorized
          content:
            "*/*":
              schema:
                type: string
        "200":
          description: Successful token retrieval
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TokenResponse"
  /flows/{id}:
    get:
      tags:
        - Flows
      summary: Get Flow
      description: Retrieves a specific flow's details
      operationId: getFlow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Flow details retrieved successfully
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Flow"
        "404":
          description: Flow not found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Flow"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Flows
      summary: Delete Flow
      description: Deletes a specific flow
      operationId: deleteFlow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Flow deleted successfully
      security:
        - bearerAuth: []
  /flows/{id}/runs:
    get:
      tags:
        - Flows
      summary: Get Flow Runs
      description: Retrieves all runs for a specific flow
      operationId: getFlowRuns
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: Flow not found
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowRun"
        "200":
          description: Flow runs retrieved successfully
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
  /flows/{flowId}/versions/{versionId}:
    get:
      tags:
        - Flows
      summary: Read Flow File Version
      description: Reads a specific version of the flow file
      operationId: readFlowFileVersion
      parameters:
        - name: flowId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: versionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: Flow or version not found
          content:
            "*/*":
              schema:
                type: string
        "200":
          description: Flow file version read successfully
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
  /flows/read/{id}:
    get:
      tags:
        - Flows
      summary: Read Flow
      description: Reads the content of a specific flow
      operationId: readFlow
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "404":
          description: Flow not found
          content:
            "*/*":
              schema:
                type: string
        "200":
          description: Flow content read successfully
          content:
            "*/*":
              schema:
                type: string
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Flow:
      required:
        - description
        - name
        - versions
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        currentFlowVersion:
          $ref: "#/components/schemas/FlowVersion"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/FlowVersion"
        workspace:
          $ref: "#/components/schemas/Workspace"
        createdAt:
          type: string
          format: date-time
    FlowVersion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        flow:
          $ref: "#/components/schemas/Flow"
        createdAt:
          type: string
          format: date-time
    Workspace:
      required:
        - flows
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        flows:
          type: array
          items:
            $ref: "#/components/schemas/Flow"
    User:
      required:
        - email
        - firstName
        - lastName
        - workspaces
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/UserWorkspace"
    UserWorkspace:
      required:
        - role
      type: object
      properties:
        id:
          type: integer
          format: int64
        workspace:
          $ref: "#/components/schemas/Workspace"
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
        role:
          type: string
          enum:
            - OWNER
            - ADMIN
            - MEMBER
            - GUEST
    UpdateFlow:
      required:
        - flowId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        program:
          type: string
        flowId:
          type: integer
          format: int64
    TransformDto:
      type: object
      properties:
        input:
          type: string
        program:
          type: string
    CreateFlow:
      required:
        - description
        - name
        - program
        - workspaceId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        program:
          type: string
        workspaceId:
          type: integer
          format: int64
    ExecuteFlow:
      required:
        - flowId
        - input
      type: object
      properties:
        flowId:
          type: integer
          format: int64
        input:
          type: string
    LoginRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TokenResponse:
      required:
        - expires_in
        - token
        - token_type
      type: object
      properties:
        token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
          format: int32
        refresh_token:
          type: string
    FlowRun:
      required:
        - payload
        - response
        - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        flowVersion:
          $ref: "#/components/schemas/FlowVersion"
        status:
          type: string
          enum:
            - SUCCESS
            - FAILED
            - UNKNOWN
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        payload:
          type: string
        response:
          type: string
